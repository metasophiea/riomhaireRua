//request rule from user
    //entered rule is a binary reaction to the following situations
    // 111 110 101 100 011 010 001 000
    //thus for the following results
    // 111 110 101 100 011 010 001 000
    //  0   0   0   1   1   1   1   0
    //a user must enter "30"

    set:6:128 //print machine name
    set:6:10  //next line
    set:6:114 //r
    set:6:117 //u
    set:6:108 //l
    set:6:101 //e
    set:6:32  //(space)
    set:6:45  //-
    set:6:62  //>
    set:6:32  //(space)
    set:6:0   //prompt input

//extract that value (placing it into byte 130)
    set:110:48
    ::inputLoop
        copy:6:100
        ifResultZero:inputLoop_end

        //multiply byte 130 by 100 (using 140 and 200)
            set:140:0
            set:200:10
            ::miniLoop
                ifResultZero:endMiniLoop
                add:130:140:140
                dec:200
                goto:miniLoop
            ::endMiniLoop
            copy:140:130

        //determine typed value of digit
            sub:100:110:120
        //add this value to the sum (byte 130)
            add:120:130:130

    goto:inputLoop
    ::inputLoop_end

//this is the selected rule, place this in byte 31
    copy:130:31

//place initial pixel
    set:9:128
    set:7:255

//run through next line and apply rules
    inc:8
    set:9:0

//x byte
    set:100:0
//holder byte
    set:110:1

::mainLoop
    inc:100
    add:100:110:120
    ifResultOverflow:main_endLoop //line finished
    //select pixel we're editing
        copy:100:9

    //gather the three pixels above the selected into 200 210 220
        dec:8
        dec:9
        copy:7:200
        inc:9
        copy:7:210
        inc:9
        copy:7:220
        dec:9
        inc:8

    //run rules found int byte 31, placing result in 230
        //reset pixel
            set:230:0

        //decision tree
            copy:200:30
            ifResultZero:0xx
            //1xx
                copy:210:30
                ifResultZero:10x
                //11x
                    copy:220:30
                    ifResultZero:110
                    //111
                        //check rule for this situation
                        ifBitSet:31:7:111_set
                            goto:end
                        ::111_set
                            set:230:255
                        goto:end
                    ::110
                        //check rule for this situation
                        ifBitSet:31:6:110_set
                            goto:end
                        ::110_set
                            set:230:255
                        goto:end
                    ::10x
                    copy:220:30
                    ifResultZero:100
                    //101
                        //check rule for this situation
                        ifBitSet:31:5:101_set
                            goto:end
                        ::101_set
                            set:230:255
                        goto:end
                    ::100
                        //check rule for this situation
                        ifBitSet:31:4:100_set
                            goto:end
                        ::100_set
                            set:230:255
                        goto:end
            ::0xx
                copy:210:30
                ifResultZero:00x
                //01x
                    copy:220:30
                    ifResultZero:010
                    //011
                        //check rule for this situation
                        ifBitSet:31:3:011_set
                            goto:end
                        ::011_set
                            set:230:255
                        goto:end
                    ::010
                        //check rule for this situation
                        ifBitSet:31:2:010_set
                            goto:end
                        ::010_set
                            set:230:255
                        goto:end
                    ::00x
                    copy:220:30
                    ifResultZero:000
                    //001
                        //check rule for this situation
                        ifBitSet:31:1:001_set
                            goto:end
                        ::001_set
                            set:230:255
                        goto:end
                    ::000
                        //check rule for this situation
                        ifBitSet:31:0:000_set
                            goto:end
                        ::000_set
                            set:230:255
                        goto:end
            ::end

    //copy 230 into pixel
        copy:230:7

    goto:mainLoop
::main_endLoop
inc:8
ifResultOverflow:endProgram
goto:mainLoop
::endProgram

wait:5000